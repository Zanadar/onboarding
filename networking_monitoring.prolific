View Application Security Groups

### What?
Application Security Groups are a collection of egress (outbound) rules that specify the protocols, ports, and IP ranges where application containers can send traffic. Security groups define rules that *allow* traffic instead of omitting it, which means that the order of evaluation for security groups that apply to the same space, org, or deployment is unimportant. Application containers use these rules to filter and log outbound network traffic.

When applications begin staging, they need traffic rules permissive enough to allow them to pull resources from the network. After an application is running, the traffic rules can be more restrictive and secure. To distinguish between these two security requirements, administrators can define different security groups for *staging* containers versus *runtime* containers.

To provide granular control when securing a deployment, an administrator can also assign security groups to apply across a CF deployment, or to specific spaces or orgs within a deployment.

### How?
1. As admin view the list of security groups 
`cf security-groups`
1. View the security groups assigned to staging containers 
`cf staging-security-groups`
1. View the security groups assigned to running containers 
`cf running-security-groups`
1. View the specific rules of each group using 
`cf security-group $group_name`

#### Expected Result
If you've deployed a full Cloud Foundry on GCP you should have two security groups applied to both staging and running apps: `public_networks` and `dns`.

If you run `cf security-group public_networks` you'll see that it allows traffic on all ports with all protocols on all IPs, save four gaps that correspond to [private IPv4 address spaces](https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces) and the [APIPA reserved range](https://www.pctechbytes.com/networking/fix-169-254-address-problem/). The `dns` security group allows access to any IP, but only on [port 53](https://en.wikipedia.org/wiki/Domain_Name_System#Protocol_transport). The combination of the two groups is that private IPs can be accessed only on port 53, and all other IPs have all ports open.

(If you're working with PCF Dev, you should see three security groups, one of which is named `all_pcfdev` and opens all egress traffic. Because of the `all_pcfdev` security group any other group would be redundant.)

### Resources
[Application Security Groups Documentation](https://docs.cloudfoundry.org/adminguide/app-sec-groups.html)
[Typical Application Security Groups](https://docs.cloudfoundry.org/adminguide/app-sec-groups.html#typical-groups)
["Taking Security to the Next Level—Application Security Groups" by Abby Kearns](https://blog.pivotal.io/pivotal-cloud-foundry/products/taking-security-to-the-next-level-application-security-groups)
["Making sense of Cloud Foundry security group declarations" by Sadique Ali](https://sdqali.in/blog/2015/05/21/making-sense-of-cloud-foundry-security-group-declarations/)
L: security

---

Securing your network traffic

### What?
The `public_networks` (or `all_pcfdev`) security group allows broad access to your CF deployment's network.  A malicious user could likely access internal systems that would not normally be exposed to the public internet. Thus, in a production environment you wouldn't have such open security groups.

**Warning**: On GCP, running an nmap scan against external IP addresses is [not advised](https://nmap.org/book/legal-issues.html).  Please ensure you use the GCP allocated 'internal IP address' for your virtual machine.  You will find the internal IP range allocated to your network from the GCP console.

Let's verify this access and secure it.

### How?
1. `cf ssh` to an application's container.
1. Download the **[nmap](https://nmap.org/download.html)** tool (the .tar.bz2 is your best bet, as you can run it as an executable file without requiring root priviledges to install it).
1. Scan a section of the private network by running:
`./nmap -v YOUR-INTERNAL-IP/24`
1.  Find a IP with an open HTTP port (80) and curl that IP address:
`curl -H "Host: dora.<YOUR-IP>.xip.io" http://<OPEN-IP>`
1. As an admin, unbind `public_networks` (or `all_pcfdev`) from the running security groups and restart your application.
1. Run the scan again and try to hit the same IP with the open HTTP port.

### Expected Result
The initial scan and curl should succeed. After removing the security group and restarting your application curling the open port should fail.

Poke around to see what else you can and can't do without that Security Group. Remember to re-bind it at the end or, if you'd like, try creating and testing your own based on those [most commonly used](https://docs.cloudfoundry.org/adminguide/app-sec-groups.html#typical-groups).

### Resources
[Nmap Security Scanner](https://nmap.org/)
[SecTools.Org: Top 125 Network Security Tools](http://sectools.org/)
[TCP and UDP Ports Explained](https://www.bleepingcomputer.com/tutorials/tcp-and-udp-ports-explained/)
[Typical Application Security Groups](https://docs.cloudfoundry.org/adminguide/app-sec-groups.html#typical-groups)
L: security

---

Allowing network traffic to other apps
### What?
By default, security groups are configured not to allow app containers to address each other directly.
For example, if `app1` has IP address 10.255.11.9 and `app2` has IP address 10.255.11.14,
`app1` would fail to curl 10.255.11.14,
and `app2` would fail to curl 10.255.11.9.

[Container networking features](https://github.com/cloudfoundry/cf-networking-release) allow `cf` users
to define network policies between apps that override security groups.

Let's see how can manage the networking security of an app that needs to communicate with other apps.

### How?
Before applying a network policy
1. Make sure you have two apps pushed. If don't have any apps pushed, `cf push dora1 -p <PATH_TO_DORA> && cf push dora2 -p <PATH_TO_DORA>`.
1. In two different terminals, `cf ssh` to dora1 and dora2's application container.
1. On dora2, run `netstat -n` to discover it's container IP address. It should have a value like 10.255.X.Y
1. On dora1, run `curl <DORA_2_IP>`.

Apply the network policy to allow access:
1. On your command line, run `cf add-network-policy dora1 --destination-app dora2 --protocol tcp --port 8080`

See if the app containers can communicate
1. In your ssh session on dora1, try this again: `curl <DORA_2_IP>`

### Expected Result
The initial curl should fail. After applying the networking policy, the curl should succeed.

Poke around to see what else you can and can't do with the network policy commands.
Can you allow access to mutliple ports?
What happens if you allow access to a port that the app doesn't listen to? Is it give the same error?

### Resources
[Container networking docs](https://github.com/cloudfoundry/cf-networking-release/tree/develop/docs)
[Docs: Understanding CF Networking](https://docs.cloudfoundry.org/concepts/understand-cf-networking.html)
[Docs: Deploy Apps with CF C2C Networking](https://docs.cloudfoundry.org/devguide/deploy-apps/cf-networking.html)
[Video: CF Networking: All Your Packets are Belong to Us](https://www.youtube.com/watch?v=WrTXd42_m10)
L: security

---

Deploy an app that uses container-to-container networking
### What?
You already understand the basics of why container-to-container networking is valuable, now let's see it in action!

### How?
Follow [these instructions](https://github.com/cloudfoundry/cf-networking-examples/blob/master/docs/c2c-no-service-discovery.md) to deploy an example app that makes use of container-to-container networking.

### Expected Result

### Resources
[Docs: Understanding CF Networking](https://docs.cloudfoundry.org/concepts/understand-cf-networking.html)
[Docs: Deploy Apps with CF C2C Networking](https://docs.cloudfoundry.org/devguide/deploy-apps/cf-networking.html)
[Blog post: Container Networking With Cloudfoundry](https://medium.com/@christophef/container-networking-with-cloudfoundry-pws-pcf-part1-8840d7f9a985)

### Relevant Repos and Teams
L: bosh, needs-work
---

[RELEASE] Networking and Monitoring ⇧
